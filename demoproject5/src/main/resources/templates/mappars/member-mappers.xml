<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
      <!-- id값을 insertMember로 작성했다면
      	java파일에서 Mapper Service Contriller모두 insertMember로 통일 
      	통일을 안해도되지만 Spring Boot는 @(어노테이션)과 properties에 작성한
      	작성경로를 통해 임의적으로 이동하기 때문에 이름이 다를경우에는 파일의위치를 찾지못하거나
      	실행이안될수있음
       -->
        
    <mapper namespace="com.example.demo.mapper.MemberMapper"> 
    	<!-- id는 나중에 MemberMapper로 만든 interface에 전달할명칭
    		parameterType는 dto중에서 어떤 java파일을 바라볼지 선택
    	 -->
    	 <!-- mapper로 sql작성이 어디서부터 어디까지인지 범위설정 
    	 		namespace는 나중에 java파일 중에서 어떤파일로 db작성내용을 전달받고 전달할지 파일지정
    	 -->
<insert id="insertMember" parameterType="com.example.demo.dto.Member">
	INSERT INTO member(member_id,member_name,member_age,member_phone)
		<!-- DB에 저장된 컬럼명  -->
		VALUES(member_seq.NEXTVAL,#{memberName},#{memberAge},#{memberPhone})
		<!-- DTO라는 폴더밑에 작성된 Member 객체안에 적혀있는 변수명들을 작성 -->

</insert>
	<!-- 마찬가지로 select update delete작성해주면 됨 
		select는 parameterType이 들어가는것이 아니라 resultSet사용해서 검색이나 조회한 결과를 자바에 전달함
	 -->
</mapper>  